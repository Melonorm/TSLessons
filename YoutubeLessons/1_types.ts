/**
 * 1. ТИПЫ ПЕРЕМЕННЫХ
 **/

/*-------------------------------------------------------------------------------
1.1    Объявление и инициализация переменных:
    {модификатор} {имяПеременной}: {тип} = {значение};
 */

const petName: string = "Вега";

/*--------------------------------------------------------------------------------
1.2     Модификаторы изменения пременной
 */

// const - нельзя изменить присвоенное значение (аналог final)
const finalNumber: number = 10
//finalNumber = 20;  // ОШИБКА!!!

// let - значение переменной можно изменить
let notFinalNumber = 10;
notFinalNumber = 20;

/*----------------------------------------------------------------------------------
1.3     Типы переменных:
 */

// логические (значения true / false)
const isHot: boolean = true;
const isCold: boolean = false;

// численные (обобщённый тип для int и float)
const age: number = 38;         // int
const weight: number = 104.6;  // double

// строки
const firstName: string = 'Виталий';   // через одинарные кавычки
const lastName: string = "Швагер";    // через двойные кавычки

const firstNameLength: number = firstName.length;  // длина строки

/*--------------------------------------------------------------------------------------
1.4     Массивы
 */

// объявление
const numberArray1: number[] = [1, 1, 2, 3, 5, 8, 13]
const numberArray2: Array<number> = [1, 1, 2, 3, 5, 8, 13]

// массив, состоящий из разных типов данных (Tuple)
const contact: [string, string, number] = ['Vitaliy', 'Shvager', 235686]

/*---------------------------------------------------------------------------------------
1.5     Переопределение типов данных. Тип any
 */

let personAge: any = 38    // если нужно переопределить тип анных - присваиваем переменной тип any
personAge = 'тридцать восемь'

/*---------------------------------------------------------------------------------------
1.6     Функциональный тип void
 */

// Если функция ничего не возвращает, она имеет тип void
function sayMyName(name: string): void{
    console.log(name)
}
sayMyName('Веталь!')

/*--------------------------------------------------------------------------------------
1.7     Функциональный тип never
 */

//    Тип never стоит указывать, если:
//  a) функция в любом случае возвращает ошибку и никогда не заканчивает своё выполнение;
//  б) функция имеет бесконечный цикл (постоянно что-либо делает)

function throwErrorFunct(): never {    // а)
    throw new Error();
}

function infiniteFunct(): never {      // б)
    while (true){
        console.log('БЕСКОНЕЧНОСТЬ!')
    }
}

/*----------------------------------------------------------------------------------------
1.8     Создание собтвенных типов
 */

// В TypeScript можно, используя примитивные типы, создавать для них Alias`ы.
// Используется ключевое слово type
type Login = string    // создание типа Login на основе string
const userLogin: Login = 'admin'

// Alias`ы можно создавать на основе нескольких примитивных типов:
type ID = string | number
const id1: ID = '123456'
const id2: ID = 123456

// Alias`ы можно также создавать на основе типов null и undefined
type SomeType = string | null | undefined