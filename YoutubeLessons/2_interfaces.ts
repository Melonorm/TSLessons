/**
 *  2.  ИНТЕРФЕЙСЫ
 **/

//    Интерфейс - тип, который в основном служит для объектов или классов, в которм указывается, какие поля, функции и
// элементы должны присутствовать у этих объектов.
//    Интерфейсы нужны только на этапе разработки, они ни во что не компилируются.

/*---------------------------------------------------------------------------------------------------------------------
2.1     Пример интерфейса
 */
interface Rect {
    readonly id: string   // readonly - поле только для чтения. Его нельзя изменять.
    color?: string       // знак вопроса (?) означает, что элемент необязательный в классах-наследниках
    size: {           // size - объект, имеющий 2 параметра: ширина и высота
        width: number
        height: number
    }
}

/*-----------------------------------------------------------------------------------------------------------------
2.2     Создание объектов на основе интерфейса
 */

const rect1: Rect = {
    id: '1234',
    size: {
        width: 20,
        height: 30
    },
    color: '#acc'
}

const rect2: Rect = {
    id: '4321',
    size: {
        width: 15,
        height: 25
    }              // т.к. поле color необязательно, его можно не указывать...
}
rect2.color = 'black' // ... но его можно при желании добавить и потом.
// Хоть объект rect2 и неизменяемый (const), ЕГО ВНУТРЕННЕЕ СОСТОЯНИЕ МОЖНО МЕНЯТЬ

// Можно указать пустому объекту, что он будет реализовывать интерфейс. 2 способа.
const rect3 = {} as Rect
const rect4 = <Rect> {}

/*
2.3     Наследование интерфейсов
 */

// RectWithArea наследуется от Rect
interface RectWithArea extends Rect {
    getArea: () => number    // функция без реалиации (абстрактный метод). Возвращает number
}

const rect5: RectWithArea = {
    id: '5577',
    size: {
        width: 50,
        height: 60
    },
    getArea(): number {
        return this.size.height * this.size.width
    }
}

/*
2.4     Взаимодействие интерфейсов с классами
 */

interface IClock { // Часто интерфейсы называются с большой буквы I (Interface)
    time: Date
    setTime(date: Date): void
}

class Clock implements IClock {
    time: Date = new Date()

    setTime(date: Date) {
        this.time = date
    }
}

/*
2.5     Интерфейсы для объектов с произвольным количеством параметров одного типа
 */
interface Styles {
    [key: string]: string   // у объекта быть произвольное количество полей типа string
}

const css1: Styles =  {
    border: '1px solid black',
    marginTop: '2px',
    borderRadius: '3px'
    // ... и так далее....
}



